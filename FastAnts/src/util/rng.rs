use std::mem;
use std::num::Wrapping;

/// A random number generator
///
/// We could use a Rust library, but we want to be able to replicate the same
/// simulations as the Haskell simulator
pub struct Rng {
    stream: Box<Iterator<Item=usize>>,
}

impl Rng {
    pub fn new(seed: usize) -> Rng {
        fn f(x: usize) -> usize {
            (Wrapping(x) * Wrapping(22_695_477) + Wrapping(1)).0
        }

        fn g(x: usize) -> usize {
            (x / 65536) % 16384
        }

        Rng {
            stream: Box::new(iterate(seed, f).skip(4).map(g))
        }
    }

    pub fn random_int(&mut self, n: usize) -> usize {
        self.stream.next().unwrap() % n
    }
}

/// An iterator similar to Haskell's `iterate` function
pub struct Iterate<T: Copy, F: Fn(T) -> T> {
    state: T,
    f: F
}

impl<T: Copy, F: Fn(T) -> T> Iterator for Iterate<T, F> {
    type Item=T;
    fn next(&mut self) -> Option<Self::Item> {
        let new_state = (self.f)(self.state);
        Some(mem::replace(&mut self.state, new_state))
    }
}

fn iterate<T: Copy, F: Fn(T) -> T>(seed: T, f: F) -> Iterate<T, F> {
    Iterate { state: seed, f: f }
}

#[test]
// Ensure that our Rng is similar to the one implemented in Haskell
fn test_random() {
    let seed = 12345;
    let expected_results = vec![7193,2932,10386,5575,100,15976,430,9740,9449,1636,11030,9848,13965,16051,14483,6708,5184,15931,7014,461,11371,5856,2136,9139,1684,15900,10236,13297,1364,6876,15687,14127,11387,13469,11860,15589,14209,16327,7024,3297,3120,842,12397,9212,5520,4983,7205,7193,4883,7712,6732,7006,10241,1012,15227,9910,14119,15124,6010,13191,5820,14074,5582,5297,10387,4492,14468,7879,8839,12668,5436,8081,4900,10723,10360,1218,11923,3870,12071,3574,12232,15592,12909,9711,6638,2488,12725,16145,9746,9053,5881,3867,10512,4312,8529,1576,15803,5498,12730,7397,16208,12607,9769,5652,8221,14953,11984,3906,10350,3168,2480,15556,10680,1994,4192,11512,12809,8166,1052,11962,2991,12590,1041,14117,5416,7469,6631,8843,15690,10142,2192,11447,12211,4294,2384,15458,15731,10515,8973,7667,3577,6646,2009,2428,9275,8190,9405,4081,1066,12853,4040,2986,1109,4800,89,12316,6108,1202,15785,5332,7320,9008,12187,6069,14728,5579,15816,12914,6527,7706,10438,8015,3596,14999,2489,10516,9898,6844,9245,593,2089,8286,13778,16345,4188,10825,12649,4729,4612,9245,3758,7161,13564,5993,7542,15190,1703,14853,1706,11326,1687,13749,10132,5580,15231,9467,13161,9348,7259,317,1816,2962,6622,15896,6994,2367,5148,3587,218,2740,2168,3112,4879,2804,976,1919,3255,2323,9448,11053,11022,12732,15125,28,2830,6115,3370,987,11521,6342,5288,4280,2629,1834,14625,4891,10591,14804,6125,2086,7236,6469,9233,395,5347,2235,10859,10925,15350,1636,1571,2810,13835,7909,4431,391,717,4107,7654,13806,8856,14032,743,14949,11837,9362,2506,6944,3346,14223,2087,5864,13630,4772,12709,15612,8771,4166,11814,11304,11724,3265,48,12068,14009,9137,1951,12847,617,15550,11401,3564,1095,924,15986,9085,14231,10050,5041,1502,14211,15465,13602,11395,353,8008,8717,11061,3399,12431,14423,11050,10449,2466,3303,8548,49,1047,91,15947,377,12402,7149,4750,1573,6176,671,9527,12012,9905,686,14093,7624,5722,4918,12079,14916,15275,2594,11501,11270,3212,5719,15082,14236,15998,2593,8048,10635,6161,477,1556,15253,4512,13032,16011,8267,8532,11976,3275,8404,3673,9882,1637,14588,10074,15035,14626,7552,14403,8890,5853,6296,6967,14718,8864,10438,207,14772,6914,3550,2965,13948,7616,12374,6848,7252,155,3792,8242,1604,7025,7654,7600,13131,16287,1589,9568,10250,6294,11436,14729,2223,12732,12566,10118,14116,7557,3814,14859,377,14802,3139,7836,11408,3466,9044,6730,9991,15222,4557,10673,12395,1634,15034,10287,154,8818,1676,6758,15225,4034,11617,14324,15576,14914,6040,4210,2210,6864,149,10155,11081,5527,2001,9502,5745,4519,7206,12982,1499,1493,11610,9928,14485,14037,4074,5454,2656,8855,16152,9314,14689,5343,10551,16382,9229,8487,12853,2290,2894,15801,6251,6950,9466,15369,10145,1810,2679,6737,9829,6779,4007,10863,10638,5232,3610,2563,14859,8324,12403,10180,14577,13645,2587,4644,11717,12829,1829,2852,11014,6144,130,7545,13567,14838,102,12000,5835,114,762,3007,4521,7186,16195,10237,4738,929,1106,4387,6584,6475,13997,3507,305,4895,14846,9673,3236,714,4858,4336,12323,6290,3476,1351,14569,15761,13156,9173,1126,8500,7762,15913,12681,5620,13191,12598,14413,6483,4757,4461,4998,8985,1253,9244,10478,6096,14689,8710,7019,14973,6243,16196,13219,14753,15326,13403,2754,13168,6091,1183,9099,3409,7895,15815,7581,14998,12107,11474,12040,3709,5179,1049,4112,13671,9970,11957,1344,12631,7326,3348,13235,13742,3128,5847,11166,15909,14519,7662,5410,15627,11125,12022,11089,15553,10977,2770,12670,4211,6503,13705,3786,12312,2204,5728,15340,7085,3246,9528,12096,8621,7180,8490,13075,9429,1873,3169,4653,15638,5495,10551,1696,4058,4153,13459,5841,15228,3272,6530,3268,12802,15539,6676,13228,7965,4881,10617,1970,13667,2544,13149,1030,16075,5122,3200,15140,3177,1670,2202,9576,8555,1909,12654,4565,13653,3055,6957,9506,10617,13029,4621,4870,3514,2055,7466,15813,4226,15088,4765,10235,13824,5776,14554,9385,12966,1242,12623,12669,1251,10928,10299,10086,10782,10251,1484,11608,2803,2159,7292,6493,15025,12174,4269,11229,9748,3643,13699,4398,3391,11154,6914,5471,9469,3686,2409,13889,15161,4843,9678,16311,15035,14501,15355,7744,10789,13456,10631,5058,557,5009,9785,15001,14109,14621,9625,736,4488,1575,3544,5631,12878,13392,16354,3189,7634,12618,11457,8680,10875,1677,13365,4970,11881,6462,2194,5134,2169,3676,5082,939,8315,7981,6682,5103,15027,10728,5386,1960,14990,2724,1248,14415,12453,2176,12917,3542,4087,8980,7835,5299,9827,3096,6845,7725,13413,6484,1721,5862,18,15047,12282,16298,16213,283,3546,13431,13675,73,5942,11725,8093,6792,11603,10295,3390,16252,6129,7705,16100,11164,3758,16317,10474,13284,2973,5529,13606,10685,8998,14563,8167,9001,7457,3672,3123,13107,2862,12104,11071,7830,6232,11494,4911,6317,3562,6606,8463,5275,2448,1495,529,14011,8370,6172,8,12874,11533,13125,11557,8019,16020,4123,2802,5339,11910,14924,2188,4942,4048,7035,13349,2857,14501,139,15290,3049,8540,1325,6416,10036,5257,4520,1269,5191,11359,5864,3509,8096,6470,13514,11482,13036,11704,13991,14377,307,11105,4639,2522,9026,3447,5159,15382,12377,3159,10325,5047,7958,5729,9835,13883,15009,14869,4643,1801,14361,15726,14650,2025,14399,7807,7104,6333,354,14668,2718,12933,15754,3819,10344,14739,2280,10716,14437,778,7294,7077,10204,10654,8459,4017,15777,3463,13881,12139,7136,7109,14858,5014,42,14491,7296,16112,11710,10566,2955,7687,11801,6398,825,2139,5056,5424,3609,16053,11084,7417,496,8903,1719,8166,1183,9221,3815,2027,9556,7619,1913,10913,5616,8848,12495,15812,4281,12497,13404,10989,13889,3234,1839,7820,12182,15081,11966,11816,8363,6588,5109,12763];

    let real_results: Vec<_> = Rng::new(seed).stream.take(1000).collect();
    assert_eq!(real_results, expected_results);
}
